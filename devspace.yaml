version: v1beta10

# `vars` specifies variables which may be used as ${VAR_NAME} in devspace.yaml
vars:
- name: IMAGE
  value: devspace-hello-world
images:
  hello-world:
    image: trow.${DEVSPACE_NAMESPACE}.svc.cluster.local:8000/${IMAGE}
    tags:
      - latest
    build:
      kaniko:
        insecure: true
pullSecrets:
- registry: trow.${DEVSPACE_NAMESPACE}.svc.cluster.local:8000
  username: user
  password: password
hooks:
- command: "helm get notes trow > /dev/null || helm upgrade trow trow --namespace ${DEVSPACE_NAMESPACE} --install --repo https://trow.io"
  when:
    before:
      images: all
deployments:
- name: trow-service
  kubectl:
    manifests:
    - trow-service.yaml
- name: hello-world
  helm:
    # We are deploying the so-called Component Chart: https://devspace.sh/component-chart/docs
    componentChart: true
    values:
      containers:
      - image: localhost:30999/${IMAGE}:latest
# `dev` only applies when you run `devspace dev`
dev:
  # `dev.sync` configures a file sync between our Pods in k8s and your local project files
  sync:
  - labelSelector:
      app.kubernetes.io/component: hello-world
      devspace.sh/replaced: "true"
    excludePaths:
    - .git/
    uploadExcludePaths:
    - node_modules
    - npm-debug.log
    containerPath: /usr/src/app

  # `dev.terminal` tells DevSpace to open a terminal as a last step during `devspace dev`
  terminal:
    labelSelector:
      app.kubernetes.io/component: hello-world
      devspace.sh/replaced: "true"
    workDir: /usr/src/app
    # With this optional `command` we can tell DevSpace to run a script when opening the terminal
    # This is often useful to display help info for new users or perform initial tasks (e.g. installing dependencies)
    # DevSpace has generated an example ./devspace_start.sh file in your local project - Feel free to customize it!
    command:
    - ./devspace_start.sh

  # Since our Helm charts and manifests deployments are often optimized for production,
  # DevSpace let's you swap out Pods dynamically to get a better dev environment
  replacePods:
  - labelSelector:
      app.kubernetes.io/component: hello-world
    # Since the `${IMAGE}` used to start our main application pod may be distroless or not have any dev tooling, let's replace it with a dev-optimized image
    # DevSpace provides a sample image here but you can use any image for your specific needs
    replaceImage: node:16-buster
    # Besides replacing the container image, let's also apply some patches to the `spec` of our Pod
    # We are overwriting `command` + `args` for the first container in our selected Pod, so it starts with `sleep 9999999`
    # Using `sleep 9999999` as PID 1 (instead of the regular ENTRYPOINT), allows you to start the application manually
    patches:
    - op: replace
      path: spec.containers[0].command
      value:
      - sleep
    - op: replace
      path: spec.containers[0].args
      value:
      - "9999999"
    - op: remove
      path: spec.containers[0].securityContext


